
First_Commit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002954  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000bc  20000070  08002c08  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000012c  08002c08  0002012c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ccc0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000017c7  00000000  00000000  0002cd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b10  00000000  00000000  0002e528  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a78  00000000  00000000  0002f038  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005fa1  00000000  00000000  0002fab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003bbc  00000000  00000000  00035a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003960d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000031c4  00000000  00000000  0003968c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002b0c 	.word	0x08002b0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002b0c 	.word	0x08002b0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b08f      	sub	sp, #60	; 0x3c
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fa31 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f84d 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f8e3 	bl	8000798 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 f8b7 	bl	8000744 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  BufLen = sprintf(uartBuffer, "Timer Test\n\r");
 80005d6:	463b      	mov	r3, r7
 80005d8:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <main+0x94>)
 80005da:	461c      	mov	r4, r3
 80005dc:	4613      	mov	r3, r2
 80005de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e0:	c407      	stmia	r4!, {r0, r1, r2}
 80005e2:	7023      	strb	r3, [r4, #0]
 80005e4:	230c      	movs	r3, #12
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuffer, BufLen, 100);
 80005e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4639      	mov	r1, r7
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	4819      	ldr	r0, [pc, #100]	; (8000658 <main+0x98>)
 80005f2:	f001 fb62 	bl	8001cba <HAL_UART_Transmit>

  HAL_TIM_Base_Start(&htim10);
 80005f6:	4819      	ldr	r0, [pc, #100]	; (800065c <main+0x9c>)
 80005f8:	f001 faaa 	bl	8001b50 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  timer_val = __HAL_TIM_GET_COUNTER(&htim10);
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <main+0x9c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000602:	867b      	strh	r3, [r7, #50]	; 0x32

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2120      	movs	r1, #32
 8000608:	4815      	ldr	r0, [pc, #84]	; (8000660 <main+0xa0>)
 800060a:	f000 fd19 	bl	8001040 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800060e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000612:	f000 fa7d 	bl	8000b10 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2120      	movs	r1, #32
 800061a:	4811      	ldr	r0, [pc, #68]	; (8000660 <main+0xa0>)
 800061c:	f000 fd10 	bl	8001040 <HAL_GPIO_WritePin>

	  timer_val = __HAL_TIM_GET_COUNTER(&htim10) - timer_val;
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <main+0x9c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000626:	b29a      	uxth	r2, r3
 8000628:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	867b      	strh	r3, [r7, #50]	; 0x32

	  BufLen = sprintf(uartBuffer, "%u us\r\n", timer_val);
 800062e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8000630:	463b      	mov	r3, r7
 8000632:	490c      	ldr	r1, [pc, #48]	; (8000664 <main+0xa4>)
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fe4b 	bl	80022d0 <siprintf>
 800063a:	6378      	str	r0, [r7, #52]	; 0x34
	  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuffer, BufLen, 100);
 800063c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800063e:	b29a      	uxth	r2, r3
 8000640:	4639      	mov	r1, r7
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <main+0x98>)
 8000646:	f001 fb38 	bl	8001cba <HAL_UART_Transmit>

	  HAL_Delay(1000);
 800064a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064e:	f000 fa5f 	bl	8000b10 <HAL_Delay>
	  timer_val = __HAL_TIM_GET_COUNTER(&htim10);
 8000652:	e7d3      	b.n	80005fc <main+0x3c>
 8000654:	08002b24 	.word	0x08002b24
 8000658:	200000e0 	.word	0x200000e0
 800065c:	20000098 	.word	0x20000098
 8000660:	40020000 	.word	0x40020000
 8000664:	08002b34 	.word	0x08002b34

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2234      	movs	r2, #52	; 0x34
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fe22 	bl	80022c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4a2a      	ldr	r2, [pc, #168]	; (800073c <SystemClock_Config+0xd4>)
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <SystemClock_Config+0xd4>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <SystemClock_Config+0xd4>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4a24      	ldr	r2, [pc, #144]	; (8000740 <SystemClock_Config+0xd8>)
 80006ae:	4b24      	ldr	r3, [pc, #144]	; (8000740 <SystemClock_Config+0xd8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b20      	ldr	r3, [pc, #128]	; (8000740 <SystemClock_Config+0xd8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006dc:	2310      	movs	r3, #16
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 ff8c 	bl	8001614 <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000702:	f000 f8b7 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2302      	movs	r3, #2
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2102      	movs	r1, #2
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fca6 	bl	8001074 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800072e:	f000 f8a1 	bl	8000874 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	; 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_USART2_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800077c:	f001 fa50 	bl	8001c20 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f000 f875 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000e0 	.word	0x200000e0
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4a2d      	ldr	r2, [pc, #180]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007b4:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4a26      	ldr	r2, [pc, #152]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007d0:	4b25      	ldr	r3, [pc, #148]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4a18      	ldr	r2, [pc, #96]	; (8000868 <MX_GPIO_Init+0xd0>)
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_GPIO_Init+0xd0>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2120      	movs	r1, #32
 8000822:	4812      	ldr	r0, [pc, #72]	; (800086c <MX_GPIO_Init+0xd4>)
 8000824:	f000 fc0c 	bl	8001040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_GPIO_Init+0xd8>)
 8000840:	f000 fa6c 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000844:	2320      	movs	r3, #32
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_GPIO_Init+0xd4>)
 800085c:	f000 fa5e 	bl	8000d1c <HAL_GPIO_Init>

}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000
 8000870:	40020800 	.word	0x40020800

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087a:	e7fe      	b.n	800087a <Error_Handler+0x6>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <HAL_MspInit+0x4c>)
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x4c>)
 800088a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ba:	2007      	movs	r0, #7
 80008bc:	f000 f9fa 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a19      	ldr	r2, [pc, #100]	; (8000950 <HAL_UART_MspInit+0x84>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d12b      	bne.n	8000946 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <HAL_UART_MspInit+0x88>)
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <HAL_UART_MspInit+0x88>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_UART_MspInit+0x88>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4a11      	ldr	r2, [pc, #68]	; (8000954 <HAL_UART_MspInit+0x88>)
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <HAL_UART_MspInit+0x88>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_UART_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000926:	230c      	movs	r3, #12
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000936:	2307      	movs	r3, #7
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <HAL_UART_MspInit+0x8c>)
 8000942:	f000 f9eb 	bl	8000d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40004400 	.word	0x40004400
 8000954:	40023800 	.word	0x40023800
 8000958:	40020000 	.word	0x40020000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <MemManage_Handler+0x4>

0800096e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <UsageFault_Handler+0x4>

0800097a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f892 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x50>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d102      	bne.n	80009c6 <_sbrk+0x16>
		heap_end = &end;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <_sbrk+0x50>)
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <_sbrk+0x54>)
 80009c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <_sbrk+0x50>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <_sbrk+0x50>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4413      	add	r3, r2
 80009d4:	466a      	mov	r2, sp
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d907      	bls.n	80009ea <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80009da:	f001 fc47 	bl	800226c <__errno>
 80009de:	4602      	mov	r2, r0
 80009e0:	230c      	movs	r3, #12
 80009e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
 80009e8:	e006      	b.n	80009f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <_sbrk+0x50>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <_sbrk+0x50>)
 80009f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80009f6:	68fb      	ldr	r3, [r7, #12]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2000008c 	.word	0x2000008c
 8000a04:	2000012c 	.word	0x2000012c

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_Init+0x40>)
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_Init+0x40>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_Init+0x40>)
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_Init+0x40>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_Init+0x40>)
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_Init+0x40>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f92d 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 f808 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff ff0c 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x54>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x58>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f937 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f90d 	bl	8000cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x5c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000124 	.word	0x20000124

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000124 	.word	0x20000124

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_Delay+0x40>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffde 	bl	8000af8 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad2      	subs	r2, r2, r3
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3f7      	bcc.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000008 	.word	0x20000008

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	490d      	ldr	r1, [pc, #52]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	4909      	ldr	r1, [pc, #36]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	2201      	movs	r2, #1
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c52:	2101      	movs	r1, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	1e59      	subs	r1, r3, #1
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f7ff ff90 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff49 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff5e 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff90 	bl	8000c0c <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5f 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffb0 	bl	8000c70 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	e165      	b.n	8001004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f040 8154 	bne.w	8000ffe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d005      	beq.n	8000d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d130      	bne.n	8000dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	f003 0201 	and.w	r2, r3, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d017      	beq.n	8000e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d123      	bne.n	8000e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	69b9      	ldr	r1, [r7, #24]
 8000e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80ae 	beq.w	8000ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4a5c      	ldr	r2, [pc, #368]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000ea8:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b59      	ldr	r3, [pc, #356]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ebe:	4a57      	ldr	r2, [pc, #348]	; (800101c <HAL_GPIO_Init+0x300>)
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4e      	ldr	r2, [pc, #312]	; (8001020 <HAL_GPIO_Init+0x304>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d025      	beq.n	8000f36 <HAL_GPIO_Init+0x21a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4d      	ldr	r2, [pc, #308]	; (8001024 <HAL_GPIO_Init+0x308>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01f      	beq.n	8000f32 <HAL_GPIO_Init+0x216>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4c      	ldr	r2, [pc, #304]	; (8001028 <HAL_GPIO_Init+0x30c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0x212>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4b      	ldr	r2, [pc, #300]	; (800102c <HAL_GPIO_Init+0x310>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d013      	beq.n	8000f2a <HAL_GPIO_Init+0x20e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4a      	ldr	r2, [pc, #296]	; (8001030 <HAL_GPIO_Init+0x314>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00d      	beq.n	8000f26 <HAL_GPIO_Init+0x20a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a49      	ldr	r2, [pc, #292]	; (8001034 <HAL_GPIO_Init+0x318>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x206>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a48      	ldr	r2, [pc, #288]	; (8001038 <HAL_GPIO_Init+0x31c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_GPIO_Init+0x202>
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	e00c      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f1e:	2307      	movs	r3, #7
 8000f20:	e00a      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f22:	2305      	movs	r3, #5
 8000f24:	e008      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f36:	2300      	movs	r3, #0
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	f002 0203 	and.w	r2, r2, #3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4093      	lsls	r3, r2
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f48:	4934      	ldr	r1, [pc, #208]	; (800101c <HAL_GPIO_Init+0x300>)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f56:	4b39      	ldr	r3, [pc, #228]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f7a:	4a30      	ldr	r2, [pc, #192]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f80:	4b2e      	ldr	r3, [pc, #184]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa4:	4a25      	ldr	r2, [pc, #148]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fce:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_GPIO_Init+0x320>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3301      	adds	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	f67f ae96 	bls.w	8000d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800100c:	bf00      	nop
 800100e:	3724      	adds	r7, #36	; 0x24
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40023800 	.word	0x40023800
 800101c:	40013800 	.word	0x40013800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40020800 	.word	0x40020800
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40021400 	.word	0x40021400
 8001038:	40021800 	.word	0x40021800
 800103c:	40013c00 	.word	0x40013c00

08001040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
 800104c:	4613      	mov	r3, r2
 800104e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001050:	787b      	ldrb	r3, [r7, #1]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800105c:	e003      	b.n	8001066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	041a      	lsls	r2, r3, #16
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	619a      	str	r2, [r3, #24]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e0cc      	b.n	8001222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001088:	4b68      	ldr	r3, [pc, #416]	; (800122c <HAL_RCC_ClockConfig+0x1b8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 020f 	and.w	r2, r3, #15
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	d20c      	bcs.n	80010b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001096:	4b65      	ldr	r3, [pc, #404]	; (800122c <HAL_RCC_ClockConfig+0x1b8>)
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800109e:	4b63      	ldr	r3, [pc, #396]	; (800122c <HAL_RCC_ClockConfig+0x1b8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 020f 	and.w	r2, r3, #15
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d001      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e0b8      	b.n	8001222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d020      	beq.n	80010fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010c8:	4a59      	ldr	r2, [pc, #356]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	4b59      	ldr	r3, [pc, #356]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010e0:	4a53      	ldr	r2, [pc, #332]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	4b53      	ldr	r3, [pc, #332]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ec:	4950      	ldr	r1, [pc, #320]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 80010ee:	4b50      	ldr	r3, [pc, #320]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d044      	beq.n	8001194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d107      	bne.n	8001122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	4b47      	ldr	r3, [pc, #284]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d119      	bne.n	8001152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e07f      	b.n	8001222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d003      	beq.n	8001132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800112e:	2b03      	cmp	r3, #3
 8001130:	d107      	bne.n	8001142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d109      	bne.n	8001152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e06f      	b.n	8001222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001142:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e067      	b.n	8001222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001152:	4937      	ldr	r1, [pc, #220]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 8001154:	4b36      	ldr	r3, [pc, #216]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f023 0203 	bic.w	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4313      	orrs	r3, r2
 8001162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001164:	f7ff fcc8 	bl	8000af8 <HAL_GetTick>
 8001168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116a:	e00a      	b.n	8001182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800116c:	f7ff fcc4 	bl	8000af8 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	f241 3288 	movw	r2, #5000	; 0x1388
 800117a:	4293      	cmp	r3, r2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e04f      	b.n	8001222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 020c 	and.w	r2, r3, #12
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	429a      	cmp	r2, r3
 8001192:	d1eb      	bne.n	800116c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <HAL_RCC_ClockConfig+0x1b8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 020f 	and.w	r2, r3, #15
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d90c      	bls.n	80011bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <HAL_RCC_ClockConfig+0x1b8>)
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_RCC_ClockConfig+0x1b8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 020f 	and.w	r2, r3, #15
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e032      	b.n	8001222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d008      	beq.n	80011da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011c8:	4919      	ldr	r1, [pc, #100]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d009      	beq.n	80011fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011e6:	4912      	ldr	r1, [pc, #72]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011fa:	f000 f855 	bl	80012a8 <HAL_RCC_GetSysClockFreq>
 80011fe:	4601      	mov	r1, r0
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	5cd3      	ldrb	r3, [r2, r3]
 800120e:	fa21 f303 	lsr.w	r3, r1, r3
 8001212:	4a09      	ldr	r2, [pc, #36]	; (8001238 <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_RCC_ClockConfig+0x1c8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fc28 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023c00 	.word	0x40023c00
 8001230:	40023800 	.word	0x40023800
 8001234:	08002b3c 	.word	0x08002b3c
 8001238:	20000000 	.word	0x20000000
 800123c:	20000004 	.word	0x20000004

08001240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_RCC_GetHCLKFreq+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000

08001258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800125c:	f7ff fff0 	bl	8001240 <HAL_RCC_GetHCLKFreq>
 8001260:	4601      	mov	r1, r0
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	0a9b      	lsrs	r3, r3, #10
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	4a03      	ldr	r2, [pc, #12]	; (800127c <HAL_RCC_GetPCLK1Freq+0x24>)
 800126e:	5cd3      	ldrb	r3, [r2, r3]
 8001270:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001274:	4618      	mov	r0, r3
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800
 800127c:	08002b4c 	.word	0x08002b4c

08001280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001284:	f7ff ffdc 	bl	8001240 <HAL_RCC_GetHCLKFreq>
 8001288:	4601      	mov	r1, r0
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	0b5b      	lsrs	r3, r3, #13
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001296:	5cd3      	ldrb	r3, [r2, r3]
 8001298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800129c:	4618      	mov	r0, r3
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800
 80012a4:	08002b4c 	.word	0x08002b4c

080012a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ac:	b0a1      	sub	sp, #132	; 0x84
 80012ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012c4:	4ba0      	ldr	r3, [pc, #640]	; (8001548 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 030c 	and.w	r3, r3, #12
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	f200 8193 	bhi.w	80015f8 <HAL_RCC_GetSysClockFreq+0x350>
 80012d2:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <HAL_RCC_GetSysClockFreq+0x30>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	0800130d 	.word	0x0800130d
 80012dc:	080015f9 	.word	0x080015f9
 80012e0:	080015f9 	.word	0x080015f9
 80012e4:	080015f9 	.word	0x080015f9
 80012e8:	08001313 	.word	0x08001313
 80012ec:	080015f9 	.word	0x080015f9
 80012f0:	080015f9 	.word	0x080015f9
 80012f4:	080015f9 	.word	0x080015f9
 80012f8:	08001319 	.word	0x08001319
 80012fc:	080015f9 	.word	0x080015f9
 8001300:	080015f9 	.word	0x080015f9
 8001304:	080015f9 	.word	0x080015f9
 8001308:	08001495 	.word	0x08001495
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <HAL_RCC_GetSysClockFreq+0x2a4>)
 800130e:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8001310:	e175      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001312:	4b8f      	ldr	r3, [pc, #572]	; (8001550 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8001314:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001316:	e172      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001318:	4b8b      	ldr	r3, [pc, #556]	; (8001548 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001320:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001322:	4b89      	ldr	r3, [pc, #548]	; (8001548 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d056      	beq.n	80013dc <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800132e:	4b86      	ldr	r3, [pc, #536]	; (8001548 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	099b      	lsrs	r3, r3, #6
 8001334:	f04f 0400 	mov.w	r4, #0
 8001338:	f240 11ff 	movw	r1, #511	; 0x1ff
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	ea01 0103 	and.w	r1, r1, r3
 8001344:	ea02 0204 	and.w	r2, r2, r4
 8001348:	460b      	mov	r3, r1
 800134a:	4614      	mov	r4, r2
 800134c:	0160      	lsls	r0, r4, #5
 800134e:	6678      	str	r0, [r7, #100]	; 0x64
 8001350:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001352:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001356:	6678      	str	r0, [r7, #100]	; 0x64
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	663b      	str	r3, [r7, #96]	; 0x60
 800135c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001360:	1a5b      	subs	r3, r3, r1
 8001362:	eb64 0402 	sbc.w	r4, r4, r2
 8001366:	01a0      	lsls	r0, r4, #6
 8001368:	65f8      	str	r0, [r7, #92]	; 0x5c
 800136a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800136c:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8001370:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001372:	0198      	lsls	r0, r3, #6
 8001374:	65b8      	str	r0, [r7, #88]	; 0x58
 8001376:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 800137a:	1aed      	subs	r5, r5, r3
 800137c:	eb66 0604 	sbc.w	r6, r6, r4
 8001380:	4633      	mov	r3, r6
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	657b      	str	r3, [r7, #84]	; 0x54
 8001386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001388:	4628      	mov	r0, r5
 800138a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800138e:	657b      	str	r3, [r7, #84]	; 0x54
 8001390:	462b      	mov	r3, r5
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	653b      	str	r3, [r7, #80]	; 0x50
 8001396:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800139a:	461d      	mov	r5, r3
 800139c:	4626      	mov	r6, r4
 800139e:	186b      	adds	r3, r5, r1
 80013a0:	eb46 0402 	adc.w	r4, r6, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	4621      	mov	r1, r4
 80013a8:	460b      	mov	r3, r1
 80013aa:	025b      	lsls	r3, r3, #9
 80013ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013b0:	4602      	mov	r2, r0
 80013b2:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 80013b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013b8:	4603      	mov	r3, r0
 80013ba:	025b      	lsls	r3, r3, #9
 80013bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80013be:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80013c2:	4618      	mov	r0, r3
 80013c4:	4621      	mov	r1, r4
 80013c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013c8:	f04f 0400 	mov.w	r4, #0
 80013cc:	461a      	mov	r2, r3
 80013ce:	4623      	mov	r3, r4
 80013d0:	f7fe ff6e 	bl	80002b0 <__aeabi_uldivmod>
 80013d4:	4603      	mov	r3, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80013da:	e04d      	b.n	8001478 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013dc:	4b5a      	ldr	r3, [pc, #360]	; (8001548 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	099b      	lsrs	r3, r3, #6
 80013e2:	f04f 0400 	mov.w	r4, #0
 80013e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	ea01 0103 	and.w	r1, r1, r3
 80013f2:	ea02 0204 	and.w	r2, r2, r4
 80013f6:	460b      	mov	r3, r1
 80013f8:	4614      	mov	r4, r2
 80013fa:	0160      	lsls	r0, r4, #5
 80013fc:	6478      	str	r0, [r7, #68]	; 0x44
 80013fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001400:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001404:	6478      	str	r0, [r7, #68]	; 0x44
 8001406:	015b      	lsls	r3, r3, #5
 8001408:	643b      	str	r3, [r7, #64]	; 0x40
 800140a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800140e:	1a5b      	subs	r3, r3, r1
 8001410:	eb64 0402 	sbc.w	r4, r4, r2
 8001414:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8001418:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 800141c:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8001420:	ebba 0a03 	subs.w	sl, sl, r3
 8001424:	eb6b 0b04 	sbc.w	fp, fp, r4
 8001428:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800142e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001430:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001436:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
 800143c:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001440:	eb1a 0a01 	adds.w	sl, sl, r1
 8001444:	eb4b 0b02 	adc.w	fp, fp, r2
 8001448:	ea4f 238b 	mov.w	r3, fp, lsl #10
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
 800144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001450:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
 8001456:	ea4f 238a 	mov.w	r3, sl, lsl #10
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
 800145c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001460:	4650      	mov	r0, sl
 8001462:	4659      	mov	r1, fp
 8001464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001466:	f04f 0400 	mov.w	r4, #0
 800146a:	461a      	mov	r2, r3
 800146c:	4623      	mov	r3, r4
 800146e:	f7fe ff1f 	bl	80002b0 <__aeabi_uldivmod>
 8001472:	4603      	mov	r3, r0
 8001474:	460c      	mov	r4, r1
 8001476:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001478:	4b33      	ldr	r3, [pc, #204]	; (8001548 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	3301      	adds	r3, #1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8001488:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800148a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800148c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001490:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001492:	e0b4      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001494:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800149c:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d054      	beq.n	8001554 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014aa:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	099b      	lsrs	r3, r3, #6
 80014b0:	f04f 0400 	mov.w	r4, #0
 80014b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	ea01 0103 	and.w	r1, r1, r3
 80014c0:	ea02 0204 	and.w	r2, r2, r4
 80014c4:	460b      	mov	r3, r1
 80014c6:	4614      	mov	r4, r2
 80014c8:	0160      	lsls	r0, r4, #5
 80014ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 80014cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014ce:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80014d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80014d4:	015b      	lsls	r3, r3, #5
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80014d8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80014dc:	1a5b      	subs	r3, r3, r1
 80014de:	eb64 0402 	sbc.w	r4, r4, r2
 80014e2:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80014e6:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80014ea:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80014ee:	ebb8 0803 	subs.w	r8, r8, r3
 80014f2:	eb69 0904 	sbc.w	r9, r9, r4
 80014f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
 8001504:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001508:	623b      	str	r3, [r7, #32]
 800150a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800150e:	eb18 0801 	adds.w	r8, r8, r1
 8001512:	eb49 0902 	adc.w	r9, r9, r2
 8001516:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800152e:	4640      	mov	r0, r8
 8001530:	4649      	mov	r1, r9
 8001532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001534:	f04f 0400 	mov.w	r4, #0
 8001538:	461a      	mov	r2, r3
 800153a:	4623      	mov	r3, r4
 800153c:	f7fe feb8 	bl	80002b0 <__aeabi_uldivmod>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001546:	e04b      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x338>
 8001548:	40023800 	.word	0x40023800
 800154c:	00f42400 	.word	0x00f42400
 8001550:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_RCC_GetSysClockFreq+0x364>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	f04f 0400 	mov.w	r4, #0
 800155e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	ea01 0103 	and.w	r1, r1, r3
 800156a:	ea02 0204 	and.w	r2, r2, r4
 800156e:	460b      	mov	r3, r1
 8001570:	4614      	mov	r4, r2
 8001572:	0160      	lsls	r0, r4, #5
 8001574:	6178      	str	r0, [r7, #20]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800157c:	6178      	str	r0, [r7, #20]
 800157e:	015b      	lsls	r3, r3, #5
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001586:	1a5b      	subs	r3, r3, r1
 8001588:	eb64 0402 	sbc.w	r4, r4, r2
 800158c:	01a6      	lsls	r6, r4, #6
 800158e:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001592:	019d      	lsls	r5, r3, #6
 8001594:	1aed      	subs	r5, r5, r3
 8001596:	eb66 0604 	sbc.w	r6, r6, r4
 800159a:	00f3      	lsls	r3, r6, #3
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	00eb      	lsls	r3, r5, #3
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80015ae:	186d      	adds	r5, r5, r1
 80015b0:	eb46 0602 	adc.w	r6, r6, r2
 80015b4:	02b3      	lsls	r3, r6, #10
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	02ab      	lsls	r3, r5, #10
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	e897 0060 	ldmia.w	r7, {r5, r6}
 80015c8:	4628      	mov	r0, r5
 80015ca:	4631      	mov	r1, r6
 80015cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015ce:	f04f 0400 	mov.w	r4, #0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4623      	mov	r3, r4
 80015d6:	f7fe fe6b 	bl	80002b0 <__aeabi_uldivmod>
 80015da:	4603      	mov	r3, r0
 80015dc:	460c      	mov	r4, r1
 80015de:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_RCC_GetSysClockFreq+0x364>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	0f1b      	lsrs	r3, r3, #28
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 80015ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80015ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f4:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80015f6:	e002      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <HAL_RCC_GetSysClockFreq+0x368>)
 80015fa:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80015fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001600:	4618      	mov	r0, r3
 8001602:	3784      	adds	r7, #132	; 0x84
 8001604:	46bd      	mov	sp, r7
 8001606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	00f42400 	.word	0x00f42400

08001614 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e28d      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8083 	beq.w	800173a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001634:	4b94      	ldr	r3, [pc, #592]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b04      	cmp	r3, #4
 800163e:	d019      	beq.n	8001674 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001640:	4b91      	ldr	r3, [pc, #580]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001648:	2b08      	cmp	r3, #8
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800164c:	4b8e      	ldr	r3, [pc, #568]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001658:	d00c      	beq.n	8001674 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165a:	4b8b      	ldr	r3, [pc, #556]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d112      	bne.n	800168c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001666:	4b88      	ldr	r3, [pc, #544]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001672:	d10b      	bne.n	800168c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	4b84      	ldr	r3, [pc, #528]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d05b      	beq.n	8001738 <HAL_RCC_OscConfig+0x124>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d157      	bne.n	8001738 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e25a      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001694:	d106      	bne.n	80016a4 <HAL_RCC_OscConfig+0x90>
 8001696:	4a7c      	ldr	r2, [pc, #496]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001698:	4b7b      	ldr	r3, [pc, #492]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e01d      	b.n	80016e0 <HAL_RCC_OscConfig+0xcc>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0xb4>
 80016ae:	4a76      	ldr	r2, [pc, #472]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 80016b0:	4b75      	ldr	r3, [pc, #468]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4a73      	ldr	r2, [pc, #460]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 80016bc:	4b72      	ldr	r3, [pc, #456]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e00b      	b.n	80016e0 <HAL_RCC_OscConfig+0xcc>
 80016c8:	4a6f      	ldr	r2, [pc, #444]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 80016ca:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4a6c      	ldr	r2, [pc, #432]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 80016d6:	4b6c      	ldr	r3, [pc, #432]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d013      	beq.n	8001710 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fa06 	bl	8000af8 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fa02 	bl	8000af8 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e21f      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	4b61      	ldr	r3, [pc, #388]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0xdc>
 800170e:	e014      	b.n	800173a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff f9f2 	bl	8000af8 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff f9ee 	bl	8000af8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e20b      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	4b57      	ldr	r3, [pc, #348]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x104>
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d06f      	beq.n	8001826 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001746:	4b50      	ldr	r3, [pc, #320]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b00      	cmp	r3, #0
 8001750:	d017      	beq.n	8001782 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001752:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800175a:	2b08      	cmp	r3, #8
 800175c:	d105      	bne.n	800176a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800175e:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d11c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001776:	4b44      	ldr	r3, [pc, #272]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d116      	bne.n	80017b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_RCC_OscConfig+0x186>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e1d3      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179a:	493b      	ldr	r1, [pc, #236]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 800179c:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	e03a      	b.n	8001826 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b8:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_RCC_OscConfig+0x278>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017be:	f7ff f99b 	bl	8000af8 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c6:	f7ff f997 	bl	8000af8 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1b4      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d8:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4928      	ldr	r1, [pc, #160]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
 80017f8:	e015      	b.n	8001826 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_RCC_OscConfig+0x278>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff f97a 	bl	8000af8 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001808:	f7ff f976 	bl	8000af8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e193      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d036      	beq.n	80018a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d016      	beq.n	8001868 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_RCC_OscConfig+0x27c>)
 800183c:	2201      	movs	r2, #1
 800183e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001840:	f7ff f95a 	bl	8000af8 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001848:	f7ff f956 	bl	8000af8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e173      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 800185c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x234>
 8001866:	e01b      	b.n	80018a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_RCC_OscConfig+0x27c>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff f943 	bl	8000af8 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	e00e      	b.n	8001894 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001876:	f7ff f93f 	bl	8000af8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d907      	bls.n	8001894 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e15c      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
 8001888:	40023800 	.word	0x40023800
 800188c:	42470000 	.word	0x42470000
 8001890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001894:	4b8a      	ldr	r3, [pc, #552]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1ea      	bne.n	8001876 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 8097 	beq.w	80019dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b2:	4b83      	ldr	r3, [pc, #524]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10f      	bne.n	80018de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	4a7f      	ldr	r2, [pc, #508]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 80018c4:	4b7e      	ldr	r3, [pc, #504]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018da:	2301      	movs	r3, #1
 80018dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018de:	4b79      	ldr	r3, [pc, #484]	; (8001ac4 <HAL_RCC_OscConfig+0x4b0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d118      	bne.n	800191c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ea:	4a76      	ldr	r2, [pc, #472]	; (8001ac4 <HAL_RCC_OscConfig+0x4b0>)
 80018ec:	4b75      	ldr	r3, [pc, #468]	; (8001ac4 <HAL_RCC_OscConfig+0x4b0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f6:	f7ff f8ff 	bl	8000af8 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fe:	f7ff f8fb 	bl	8000af8 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e118      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	4b6c      	ldr	r3, [pc, #432]	; (8001ac4 <HAL_RCC_OscConfig+0x4b0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d106      	bne.n	8001932 <HAL_RCC_OscConfig+0x31e>
 8001924:	4a66      	ldr	r2, [pc, #408]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001926:	4b66      	ldr	r3, [pc, #408]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6713      	str	r3, [r2, #112]	; 0x70
 8001930:	e01c      	b.n	800196c <HAL_RCC_OscConfig+0x358>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b05      	cmp	r3, #5
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x340>
 800193a:	4a61      	ldr	r2, [pc, #388]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 800193c:	4b60      	ldr	r3, [pc, #384]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6713      	str	r3, [r2, #112]	; 0x70
 8001946:	4a5e      	ldr	r2, [pc, #376]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001948:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6713      	str	r3, [r2, #112]	; 0x70
 8001952:	e00b      	b.n	800196c <HAL_RCC_OscConfig+0x358>
 8001954:	4a5a      	ldr	r2, [pc, #360]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001956:	4b5a      	ldr	r3, [pc, #360]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	f023 0301 	bic.w	r3, r3, #1
 800195e:	6713      	str	r3, [r2, #112]	; 0x70
 8001960:	4a57      	ldr	r2, [pc, #348]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001962:	4b57      	ldr	r3, [pc, #348]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	f023 0304 	bic.w	r3, r3, #4
 800196a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d015      	beq.n	80019a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001974:	f7ff f8c0 	bl	8000af8 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197a:	e00a      	b.n	8001992 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197c:	f7ff f8bc 	bl	8000af8 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	; 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0d7      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001992:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0ee      	beq.n	800197c <HAL_RCC_OscConfig+0x368>
 800199e:	e014      	b.n	80019ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff f8aa 	bl	8000af8 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a6:	e00a      	b.n	80019be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a8:	f7ff f8a6 	bl	8000af8 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e0c1      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019be:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1ee      	bne.n	80019a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d0:	4a3b      	ldr	r2, [pc, #236]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 80019d2:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80ad 	beq.w	8001b40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019e6:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d060      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d145      	bne.n	8001a86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fa:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <HAL_RCC_OscConfig+0x4b4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff f87a 	bl	8000af8 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff f876 	bl	8000af8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e093      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a26:	4926      	ldr	r1, [pc, #152]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	019b      	lsls	r3, r3, #6
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	3b01      	subs	r3, #1
 8001a42:	041b      	lsls	r3, r3, #16
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	061b      	lsls	r3, r3, #24
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	071b      	lsls	r3, r3, #28
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_RCC_OscConfig+0x4b4>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f84b 	bl	8000af8 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff f847 	bl	8000af8 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e064      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x452>
 8001a84:	e05c      	b.n	8001b40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_RCC_OscConfig+0x4b4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f834 	bl	8000af8 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f830 	bl	8000af8 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e04d      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x480>
 8001ab2:	e045      	b.n	8001b40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e040      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001acc:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <HAL_RCC_OscConfig+0x538>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d030      	beq.n	8001b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d129      	bne.n	8001b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d122      	bne.n	8001b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001afc:	4013      	ands	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d119      	bne.n	8001b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	085b      	lsrs	r3, r3, #1
 8001b14:	3b01      	subs	r3, #1
 8001b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d10f      	bne.n	8001b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800

08001b50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d001      	beq.n	8001b68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e046      	b.n	8001bf6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <HAL_TIM_Base_Start+0xb4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d022      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b82:	d01d      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <HAL_TIM_Base_Start+0xb8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d018      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <HAL_TIM_Base_Start+0xbc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d013      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_TIM_Base_Start+0xc0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00e      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <HAL_TIM_Base_Start+0xc4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d009      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_TIM_Base_Start+0xc8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <HAL_TIM_Base_Start+0xcc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d111      	bne.n	8001be4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d010      	beq.n	8001bf4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be2:	e007      	b.n	8001bf4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40010000 	.word	0x40010000
 8001c08:	40000400 	.word	0x40000400
 8001c0c:	40000800 	.word	0x40000800
 8001c10:	40000c00 	.word	0x40000c00
 8001c14:	40010400 	.word	0x40010400
 8001c18:	40014000 	.word	0x40014000
 8001c1c:	40001800 	.word	0x40001800

08001c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e03f      	b.n	8001cb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe fe40 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2224      	movs	r2, #36	; 0x24
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	68d2      	ldr	r2, [r2, #12]
 8001c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f927 	bl	8001eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	6912      	ldr	r2, [r2, #16]
 8001c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	6952      	ldr	r2, [r2, #20]
 8001c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	68d2      	ldr	r2, [r2, #12]
 8001c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b08a      	sub	sp, #40	; 0x28
 8001cbe:	af02      	add	r7, sp, #8
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d17b      	bne.n	8001dd2 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HAL_UART_Transmit+0x2c>
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e074      	b.n	8001dd4 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_UART_Transmit+0x3e>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e06d      	b.n	8001dd4 <HAL_UART_Transmit+0x11a>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2221      	movs	r2, #33	; 0x21
 8001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d0e:	f7fe fef3 	bl	8000af8 <HAL_GetTick>
 8001d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	88fa      	ldrh	r2, [r7, #6]
 8001d18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	88fa      	ldrh	r2, [r7, #6]
 8001d1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d28:	d108      	bne.n	8001d3c <HAL_UART_Transmit+0x82>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d104      	bne.n	8001d3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	e003      	b.n	8001d44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d4c:	e029      	b.n	8001da2 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2200      	movs	r2, #0
 8001d56:	2180      	movs	r1, #128	; 0x80
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f83f 	bl	8001ddc <UART_WaitOnFlagUntilTimeout>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e035      	b.n	8001dd4 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10a      	bne.n	8001d84 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	8812      	ldrh	r2, [r2, #0]
 8001d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d7a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	3302      	adds	r3, #2
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	e007      	b.n	8001d94 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	7812      	ldrb	r2, [r2, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1d0      	bne.n	8001d4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2200      	movs	r2, #0
 8001db4:	2140      	movs	r1, #64	; 0x40
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f810 	bl	8001ddc <UART_WaitOnFlagUntilTimeout>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e006      	b.n	8001dd4 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8001dd2:	2302      	movs	r3, #2
  }
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b090      	sub	sp, #64	; 0x40
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dec:	e050      	b.n	8001e90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d04c      	beq.n	8001e90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <UART_WaitOnFlagUntilTimeout+0x30>
 8001dfc:	f7fe fe7c 	bl	8000af8 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	1ad2      	subs	r2, r2, r3
 8001e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d941      	bls.n	8001e90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	330c      	adds	r3, #12
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e16:	e853 3f00 	ldrex	r3, [r3]
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	330c      	adds	r3, #12
 8001e2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e2c:	637a      	str	r2, [r7, #52]	; 0x34
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e34:	e841 2300 	strex	r3, r2, [r1]
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e5      	bne.n	8001e0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3314      	adds	r3, #20
 8001e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	e853 3f00 	ldrex	r3, [r3]
 8001e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3314      	adds	r3, #20
 8001e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e60:	623a      	str	r2, [r7, #32]
 8001e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e64:	69f9      	ldr	r1, [r7, #28]
 8001e66:	6a3a      	ldr	r2, [r7, #32]
 8001e68:	e841 2300 	strex	r3, r2, [r1]
 8001e6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e5      	bne.n	8001e40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e00f      	b.n	8001eb0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	401a      	ands	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d09f      	beq.n	8001dee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3740      	adds	r7, #64	; 0x40
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ebc:	b091      	sub	sp, #68	; 0x44
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec4:	6819      	ldr	r1, [r3, #0]
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 8001ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8001efe:	f022 020c 	bic.w	r2, r2, #12
 8001f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4bba      	ldr	r3, [pc, #744]	; (800220c <UART_SetConfig+0x354>)
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d004      	beq.n	8001f32 <UART_SetConfig+0x7a>
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4bb8      	ldr	r3, [pc, #736]	; (8002210 <UART_SetConfig+0x358>)
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d103      	bne.n	8001f3a <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f32:	f7ff f9a5 	bl	8001280 <HAL_RCC_GetPCLK2Freq>
 8001f36:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001f38:	e002      	b.n	8001f40 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f3a:	f7ff f98d 	bl	8001258 <HAL_RCC_GetPCLK1Freq>
 8001f3e:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f48:	f040 80a7 	bne.w	800209a <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f54:	4619      	mov	r1, r3
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4614      	mov	r4, r2
 8001f5e:	18db      	adds	r3, r3, r3
 8001f60:	eb44 0404 	adc.w	r4, r4, r4
 8001f64:	185b      	adds	r3, r3, r1
 8001f66:	eb44 0402 	adc.w	r4, r4, r2
 8001f6a:	00e0      	lsls	r0, r4, #3
 8001f6c:	6178      	str	r0, [r7, #20]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001f74:	6178      	str	r0, [r7, #20]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f7e:	185d      	adds	r5, r3, r1
 8001f80:	eb44 0602 	adc.w	r6, r4, r2
 8001f84:	4628      	mov	r0, r5
 8001f86:	4631      	mov	r1, r6
 8001f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f04f 0400 	mov.w	r4, #0
 8001f90:	18db      	adds	r3, r3, r3
 8001f92:	eb44 0404 	adc.w	r4, r4, r4
 8001f96:	461a      	mov	r2, r3
 8001f98:	4623      	mov	r3, r4
 8001f9a:	f7fe f989 	bl	80002b0 <__aeabi_uldivmod>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b9b      	ldr	r3, [pc, #620]	; (8002214 <UART_SetConfig+0x35c>)
 8001fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	011e      	lsls	r6, r3, #4
 8001fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4614      	mov	r4, r2
 8001fba:	18db      	adds	r3, r3, r3
 8001fbc:	eb44 0404 	adc.w	r4, r4, r4
 8001fc0:	185b      	adds	r3, r3, r1
 8001fc2:	eb44 0402 	adc.w	r4, r4, r2
 8001fc6:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8001fca:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8001fce:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8001fd2:	4653      	mov	r3, sl
 8001fd4:	465c      	mov	r4, fp
 8001fd6:	eb13 0a01 	adds.w	sl, r3, r1
 8001fda:	eb44 0b02 	adc.w	fp, r4, r2
 8001fde:	4650      	mov	r0, sl
 8001fe0:	4659      	mov	r1, fp
 8001fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f04f 0400 	mov.w	r4, #0
 8001fea:	18db      	adds	r3, r3, r3
 8001fec:	eb44 0404 	adc.w	r4, r4, r4
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	f7fe f95c 	bl	80002b0 <__aeabi_uldivmod>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b85      	ldr	r3, [pc, #532]	; (8002214 <UART_SetConfig+0x35c>)
 8002000:	fba3 1302 	umull	r1, r3, r3, r2
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	2164      	movs	r1, #100	; 0x64
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	3332      	adds	r3, #50	; 0x32
 8002012:	4a80      	ldr	r2, [pc, #512]	; (8002214 <UART_SetConfig+0x35c>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002020:	441e      	add	r6, r3
 8002022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002024:	4619      	mov	r1, r3
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	460b      	mov	r3, r1
 800202c:	4614      	mov	r4, r2
 800202e:	18db      	adds	r3, r3, r3
 8002030:	eb44 0404 	adc.w	r4, r4, r4
 8002034:	185b      	adds	r3, r3, r1
 8002036:	eb44 0402 	adc.w	r4, r4, r2
 800203a:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800203e:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002042:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002046:	4643      	mov	r3, r8
 8002048:	464c      	mov	r4, r9
 800204a:	eb13 0801 	adds.w	r8, r3, r1
 800204e:	eb44 0902 	adc.w	r9, r4, r2
 8002052:	4640      	mov	r0, r8
 8002054:	4649      	mov	r1, r9
 8002056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f04f 0400 	mov.w	r4, #0
 800205e:	18db      	adds	r3, r3, r3
 8002060:	eb44 0404 	adc.w	r4, r4, r4
 8002064:	461a      	mov	r2, r3
 8002066:	4623      	mov	r3, r4
 8002068:	f7fe f922 	bl	80002b0 <__aeabi_uldivmod>
 800206c:	4603      	mov	r3, r0
 800206e:	460c      	mov	r4, r1
 8002070:	461a      	mov	r2, r3
 8002072:	4b68      	ldr	r3, [pc, #416]	; (8002214 <UART_SetConfig+0x35c>)
 8002074:	fba3 1302 	umull	r1, r3, r3, r2
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	2164      	movs	r1, #100	; 0x64
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	3332      	adds	r3, #50	; 0x32
 8002086:	4a63      	ldr	r2, [pc, #396]	; (8002214 <UART_SetConfig+0x35c>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	4433      	add	r3, r6
 8002094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002096:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002098:	e0b3      	b.n	8002202 <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a2:	4619      	mov	r1, r3
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4614      	mov	r4, r2
 80020ac:	18db      	adds	r3, r3, r3
 80020ae:	eb44 0404 	adc.w	r4, r4, r4
 80020b2:	185b      	adds	r3, r3, r1
 80020b4:	eb44 0402 	adc.w	r4, r4, r2
 80020b8:	00e6      	lsls	r6, r4, #3
 80020ba:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80020be:	00dd      	lsls	r5, r3, #3
 80020c0:	462b      	mov	r3, r5
 80020c2:	4634      	mov	r4, r6
 80020c4:	185d      	adds	r5, r3, r1
 80020c6:	eb44 0602 	adc.w	r6, r4, r2
 80020ca:	4628      	mov	r0, r5
 80020cc:	4631      	mov	r1, r6
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f04f 0400 	mov.w	r4, #0
 80020d6:	00a5      	lsls	r5, r4, #2
 80020d8:	62fd      	str	r5, [r7, #44]	; 0x2c
 80020da:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80020dc:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 80020e0:	62fd      	str	r5, [r7, #44]	; 0x2c
 80020e2:	009c      	lsls	r4, r3, #2
 80020e4:	62bc      	str	r4, [r7, #40]	; 0x28
 80020e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020ea:	f7fe f8e1 	bl	80002b0 <__aeabi_uldivmod>
 80020ee:	4603      	mov	r3, r0
 80020f0:	460c      	mov	r4, r1
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b47      	ldr	r3, [pc, #284]	; (8002214 <UART_SetConfig+0x35c>)
 80020f6:	fba3 1302 	umull	r1, r3, r3, r2
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	011d      	lsls	r5, r3, #4
 80020fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002100:	4619      	mov	r1, r3
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	460b      	mov	r3, r1
 8002108:	4614      	mov	r4, r2
 800210a:	18db      	adds	r3, r3, r3
 800210c:	eb44 0404 	adc.w	r4, r4, r4
 8002110:	185b      	adds	r3, r3, r1
 8002112:	eb44 0402 	adc.w	r4, r4, r2
 8002116:	00e0      	lsls	r0, r4, #3
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	00d8      	lsls	r0, r3, #3
 8002124:	60b8      	str	r0, [r7, #8]
 8002126:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800212a:	eb13 0801 	adds.w	r8, r3, r1
 800212e:	eb44 0902 	adc.w	r9, r4, r2
 8002132:	4640      	mov	r0, r8
 8002134:	4649      	mov	r1, r9
 8002136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f04f 0400 	mov.w	r4, #0
 800213e:	00a6      	lsls	r6, r4, #2
 8002140:	627e      	str	r6, [r7, #36]	; 0x24
 8002142:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8002144:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002148:	627e      	str	r6, [r7, #36]	; 0x24
 800214a:	009c      	lsls	r4, r3, #2
 800214c:	623c      	str	r4, [r7, #32]
 800214e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002152:	f7fe f8ad 	bl	80002b0 <__aeabi_uldivmod>
 8002156:	4603      	mov	r3, r0
 8002158:	460c      	mov	r4, r1
 800215a:	461a      	mov	r2, r3
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <UART_SetConfig+0x35c>)
 800215e:	fba3 1302 	umull	r1, r3, r3, r2
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2164      	movs	r1, #100	; 0x64
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	3332      	adds	r3, #50	; 0x32
 8002170:	4a28      	ldr	r2, [pc, #160]	; (8002214 <UART_SetConfig+0x35c>)
 8002172:	fba2 1303 	umull	r1, r3, r2, r3
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800217c:	441d      	add	r5, r3
 800217e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002180:	4619      	mov	r1, r3
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	460b      	mov	r3, r1
 8002188:	4614      	mov	r4, r2
 800218a:	18db      	adds	r3, r3, r3
 800218c:	eb44 0404 	adc.w	r4, r4, r4
 8002190:	185b      	adds	r3, r3, r1
 8002192:	eb44 0402 	adc.w	r4, r4, r2
 8002196:	00e0      	lsls	r0, r4, #3
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	00d8      	lsls	r0, r3, #3
 80021a4:	6038      	str	r0, [r7, #0]
 80021a6:	e897 0018 	ldmia.w	r7, {r3, r4}
 80021aa:	eb13 0801 	adds.w	r8, r3, r1
 80021ae:	eb44 0902 	adc.w	r9, r4, r2
 80021b2:	4640      	mov	r0, r8
 80021b4:	4649      	mov	r1, r9
 80021b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f04f 0400 	mov.w	r4, #0
 80021be:	00a6      	lsls	r6, r4, #2
 80021c0:	61fe      	str	r6, [r7, #28]
 80021c2:	69fe      	ldr	r6, [r7, #28]
 80021c4:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80021c8:	61fe      	str	r6, [r7, #28]
 80021ca:	009c      	lsls	r4, r3, #2
 80021cc:	61bc      	str	r4, [r7, #24]
 80021ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d2:	f7fe f86d 	bl	80002b0 <__aeabi_uldivmod>
 80021d6:	4603      	mov	r3, r0
 80021d8:	460c      	mov	r4, r1
 80021da:	461a      	mov	r2, r3
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <UART_SetConfig+0x35c>)
 80021de:	fba3 1302 	umull	r1, r3, r3, r2
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	2164      	movs	r1, #100	; 0x64
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	3332      	adds	r3, #50	; 0x32
 80021f0:	4a08      	ldr	r2, [pc, #32]	; (8002214 <UART_SetConfig+0x35c>)
 80021f2:	fba2 1303 	umull	r1, r3, r2, r3
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	442b      	add	r3, r5
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	6093      	str	r3, [r2, #8]
}
 8002202:	bf00      	nop
 8002204:	3744      	adds	r7, #68	; 0x44
 8002206:	46bd      	mov	sp, r7
 8002208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800220c:	40011000 	.word	0x40011000
 8002210:	40011400 	.word	0x40011400
 8002214:	51eb851f 	.word	0x51eb851f

08002218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800221e:	490e      	ldr	r1, [pc, #56]	; (8002258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002220:	4a0e      	ldr	r2, [pc, #56]	; (800225c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002224:	e002      	b.n	800222c <LoopCopyDataInit>

08002226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222a:	3304      	adds	r3, #4

0800222c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800222c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002230:	d3f9      	bcc.n	8002226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002234:	4c0b      	ldr	r4, [pc, #44]	; (8002264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002238:	e001      	b.n	800223e <LoopFillZerobss>

0800223a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800223c:	3204      	adds	r2, #4

0800223e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002240:	d3fb      	bcc.n	800223a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002242:	f7fe fbe1 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002246:	f000 f817 	bl	8002278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224a:	f7fe f9b9 	bl	80005c0 <main>
  bx  lr    
 800224e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002258:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800225c:	08002b98 	.word	0x08002b98
  ldr r2, =_sbss
 8002260:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002264:	2000012c 	.word	0x2000012c

08002268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>
	...

0800226c <__errno>:
 800226c:	4b01      	ldr	r3, [pc, #4]	; (8002274 <__errno+0x8>)
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	2000000c 	.word	0x2000000c

08002278 <__libc_init_array>:
 8002278:	b570      	push	{r4, r5, r6, lr}
 800227a:	4e0d      	ldr	r6, [pc, #52]	; (80022b0 <__libc_init_array+0x38>)
 800227c:	4c0d      	ldr	r4, [pc, #52]	; (80022b4 <__libc_init_array+0x3c>)
 800227e:	1ba4      	subs	r4, r4, r6
 8002280:	10a4      	asrs	r4, r4, #2
 8002282:	2500      	movs	r5, #0
 8002284:	42a5      	cmp	r5, r4
 8002286:	d109      	bne.n	800229c <__libc_init_array+0x24>
 8002288:	4e0b      	ldr	r6, [pc, #44]	; (80022b8 <__libc_init_array+0x40>)
 800228a:	4c0c      	ldr	r4, [pc, #48]	; (80022bc <__libc_init_array+0x44>)
 800228c:	f000 fc3e 	bl	8002b0c <_init>
 8002290:	1ba4      	subs	r4, r4, r6
 8002292:	10a4      	asrs	r4, r4, #2
 8002294:	2500      	movs	r5, #0
 8002296:	42a5      	cmp	r5, r4
 8002298:	d105      	bne.n	80022a6 <__libc_init_array+0x2e>
 800229a:	bd70      	pop	{r4, r5, r6, pc}
 800229c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022a0:	4798      	blx	r3
 80022a2:	3501      	adds	r5, #1
 80022a4:	e7ee      	b.n	8002284 <__libc_init_array+0xc>
 80022a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022aa:	4798      	blx	r3
 80022ac:	3501      	adds	r5, #1
 80022ae:	e7f2      	b.n	8002296 <__libc_init_array+0x1e>
 80022b0:	08002b90 	.word	0x08002b90
 80022b4:	08002b90 	.word	0x08002b90
 80022b8:	08002b90 	.word	0x08002b90
 80022bc:	08002b94 	.word	0x08002b94

080022c0 <memset>:
 80022c0:	4402      	add	r2, r0
 80022c2:	4603      	mov	r3, r0
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d100      	bne.n	80022ca <memset+0xa>
 80022c8:	4770      	bx	lr
 80022ca:	f803 1b01 	strb.w	r1, [r3], #1
 80022ce:	e7f9      	b.n	80022c4 <memset+0x4>

080022d0 <siprintf>:
 80022d0:	b40e      	push	{r1, r2, r3}
 80022d2:	b500      	push	{lr}
 80022d4:	b09c      	sub	sp, #112	; 0x70
 80022d6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80022da:	ab1d      	add	r3, sp, #116	; 0x74
 80022dc:	f8ad 1014 	strh.w	r1, [sp, #20]
 80022e0:	9002      	str	r0, [sp, #8]
 80022e2:	9006      	str	r0, [sp, #24]
 80022e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022e8:	480a      	ldr	r0, [pc, #40]	; (8002314 <siprintf+0x44>)
 80022ea:	9104      	str	r1, [sp, #16]
 80022ec:	9107      	str	r1, [sp, #28]
 80022ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80022f6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80022fa:	6800      	ldr	r0, [r0, #0]
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	a902      	add	r1, sp, #8
 8002300:	f000 f866 	bl	80023d0 <_svfiprintf_r>
 8002304:	9b02      	ldr	r3, [sp, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	b01c      	add	sp, #112	; 0x70
 800230c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002310:	b003      	add	sp, #12
 8002312:	4770      	bx	lr
 8002314:	2000000c 	.word	0x2000000c

08002318 <__ssputs_r>:
 8002318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800231c:	688e      	ldr	r6, [r1, #8]
 800231e:	429e      	cmp	r6, r3
 8002320:	4682      	mov	sl, r0
 8002322:	460c      	mov	r4, r1
 8002324:	4691      	mov	r9, r2
 8002326:	4698      	mov	r8, r3
 8002328:	d835      	bhi.n	8002396 <__ssputs_r+0x7e>
 800232a:	898a      	ldrh	r2, [r1, #12]
 800232c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002330:	d031      	beq.n	8002396 <__ssputs_r+0x7e>
 8002332:	6825      	ldr	r5, [r4, #0]
 8002334:	6909      	ldr	r1, [r1, #16]
 8002336:	1a6f      	subs	r7, r5, r1
 8002338:	6965      	ldr	r5, [r4, #20]
 800233a:	2302      	movs	r3, #2
 800233c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002340:	fb95 f5f3 	sdiv	r5, r5, r3
 8002344:	f108 0301 	add.w	r3, r8, #1
 8002348:	443b      	add	r3, r7
 800234a:	429d      	cmp	r5, r3
 800234c:	bf38      	it	cc
 800234e:	461d      	movcc	r5, r3
 8002350:	0553      	lsls	r3, r2, #21
 8002352:	d531      	bpl.n	80023b8 <__ssputs_r+0xa0>
 8002354:	4629      	mov	r1, r5
 8002356:	f000 fb39 	bl	80029cc <_malloc_r>
 800235a:	4606      	mov	r6, r0
 800235c:	b950      	cbnz	r0, 8002374 <__ssputs_r+0x5c>
 800235e:	230c      	movs	r3, #12
 8002360:	f8ca 3000 	str.w	r3, [sl]
 8002364:	89a3      	ldrh	r3, [r4, #12]
 8002366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236a:	81a3      	strh	r3, [r4, #12]
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002374:	463a      	mov	r2, r7
 8002376:	6921      	ldr	r1, [r4, #16]
 8002378:	f000 fab4 	bl	80028e4 <memcpy>
 800237c:	89a3      	ldrh	r3, [r4, #12]
 800237e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002386:	81a3      	strh	r3, [r4, #12]
 8002388:	6126      	str	r6, [r4, #16]
 800238a:	6165      	str	r5, [r4, #20]
 800238c:	443e      	add	r6, r7
 800238e:	1bed      	subs	r5, r5, r7
 8002390:	6026      	str	r6, [r4, #0]
 8002392:	60a5      	str	r5, [r4, #8]
 8002394:	4646      	mov	r6, r8
 8002396:	4546      	cmp	r6, r8
 8002398:	bf28      	it	cs
 800239a:	4646      	movcs	r6, r8
 800239c:	4632      	mov	r2, r6
 800239e:	4649      	mov	r1, r9
 80023a0:	6820      	ldr	r0, [r4, #0]
 80023a2:	f000 faaa 	bl	80028fa <memmove>
 80023a6:	68a3      	ldr	r3, [r4, #8]
 80023a8:	1b9b      	subs	r3, r3, r6
 80023aa:	60a3      	str	r3, [r4, #8]
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	441e      	add	r6, r3
 80023b0:	6026      	str	r6, [r4, #0]
 80023b2:	2000      	movs	r0, #0
 80023b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023b8:	462a      	mov	r2, r5
 80023ba:	f000 fb65 	bl	8002a88 <_realloc_r>
 80023be:	4606      	mov	r6, r0
 80023c0:	2800      	cmp	r0, #0
 80023c2:	d1e1      	bne.n	8002388 <__ssputs_r+0x70>
 80023c4:	6921      	ldr	r1, [r4, #16]
 80023c6:	4650      	mov	r0, sl
 80023c8:	f000 fab2 	bl	8002930 <_free_r>
 80023cc:	e7c7      	b.n	800235e <__ssputs_r+0x46>
	...

080023d0 <_svfiprintf_r>:
 80023d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d4:	b09d      	sub	sp, #116	; 0x74
 80023d6:	4680      	mov	r8, r0
 80023d8:	9303      	str	r3, [sp, #12]
 80023da:	898b      	ldrh	r3, [r1, #12]
 80023dc:	061c      	lsls	r4, r3, #24
 80023de:	460d      	mov	r5, r1
 80023e0:	4616      	mov	r6, r2
 80023e2:	d50f      	bpl.n	8002404 <_svfiprintf_r+0x34>
 80023e4:	690b      	ldr	r3, [r1, #16]
 80023e6:	b96b      	cbnz	r3, 8002404 <_svfiprintf_r+0x34>
 80023e8:	2140      	movs	r1, #64	; 0x40
 80023ea:	f000 faef 	bl	80029cc <_malloc_r>
 80023ee:	6028      	str	r0, [r5, #0]
 80023f0:	6128      	str	r0, [r5, #16]
 80023f2:	b928      	cbnz	r0, 8002400 <_svfiprintf_r+0x30>
 80023f4:	230c      	movs	r3, #12
 80023f6:	f8c8 3000 	str.w	r3, [r8]
 80023fa:	f04f 30ff 	mov.w	r0, #4294967295
 80023fe:	e0c5      	b.n	800258c <_svfiprintf_r+0x1bc>
 8002400:	2340      	movs	r3, #64	; 0x40
 8002402:	616b      	str	r3, [r5, #20]
 8002404:	2300      	movs	r3, #0
 8002406:	9309      	str	r3, [sp, #36]	; 0x24
 8002408:	2320      	movs	r3, #32
 800240a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800240e:	2330      	movs	r3, #48	; 0x30
 8002410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002414:	f04f 0b01 	mov.w	fp, #1
 8002418:	4637      	mov	r7, r6
 800241a:	463c      	mov	r4, r7
 800241c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d13c      	bne.n	800249e <_svfiprintf_r+0xce>
 8002424:	ebb7 0a06 	subs.w	sl, r7, r6
 8002428:	d00b      	beq.n	8002442 <_svfiprintf_r+0x72>
 800242a:	4653      	mov	r3, sl
 800242c:	4632      	mov	r2, r6
 800242e:	4629      	mov	r1, r5
 8002430:	4640      	mov	r0, r8
 8002432:	f7ff ff71 	bl	8002318 <__ssputs_r>
 8002436:	3001      	adds	r0, #1
 8002438:	f000 80a3 	beq.w	8002582 <_svfiprintf_r+0x1b2>
 800243c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800243e:	4453      	add	r3, sl
 8002440:	9309      	str	r3, [sp, #36]	; 0x24
 8002442:	783b      	ldrb	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 809c 	beq.w	8002582 <_svfiprintf_r+0x1b2>
 800244a:	2300      	movs	r3, #0
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	9304      	str	r3, [sp, #16]
 8002452:	9307      	str	r3, [sp, #28]
 8002454:	9205      	str	r2, [sp, #20]
 8002456:	9306      	str	r3, [sp, #24]
 8002458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800245c:	931a      	str	r3, [sp, #104]	; 0x68
 800245e:	2205      	movs	r2, #5
 8002460:	7821      	ldrb	r1, [r4, #0]
 8002462:	4850      	ldr	r0, [pc, #320]	; (80025a4 <_svfiprintf_r+0x1d4>)
 8002464:	f7fd fed4 	bl	8000210 <memchr>
 8002468:	1c67      	adds	r7, r4, #1
 800246a:	9b04      	ldr	r3, [sp, #16]
 800246c:	b9d8      	cbnz	r0, 80024a6 <_svfiprintf_r+0xd6>
 800246e:	06d9      	lsls	r1, r3, #27
 8002470:	bf44      	itt	mi
 8002472:	2220      	movmi	r2, #32
 8002474:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002478:	071a      	lsls	r2, r3, #28
 800247a:	bf44      	itt	mi
 800247c:	222b      	movmi	r2, #43	; 0x2b
 800247e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002482:	7822      	ldrb	r2, [r4, #0]
 8002484:	2a2a      	cmp	r2, #42	; 0x2a
 8002486:	d016      	beq.n	80024b6 <_svfiprintf_r+0xe6>
 8002488:	9a07      	ldr	r2, [sp, #28]
 800248a:	2100      	movs	r1, #0
 800248c:	200a      	movs	r0, #10
 800248e:	4627      	mov	r7, r4
 8002490:	3401      	adds	r4, #1
 8002492:	783b      	ldrb	r3, [r7, #0]
 8002494:	3b30      	subs	r3, #48	; 0x30
 8002496:	2b09      	cmp	r3, #9
 8002498:	d951      	bls.n	800253e <_svfiprintf_r+0x16e>
 800249a:	b1c9      	cbz	r1, 80024d0 <_svfiprintf_r+0x100>
 800249c:	e011      	b.n	80024c2 <_svfiprintf_r+0xf2>
 800249e:	2b25      	cmp	r3, #37	; 0x25
 80024a0:	d0c0      	beq.n	8002424 <_svfiprintf_r+0x54>
 80024a2:	4627      	mov	r7, r4
 80024a4:	e7b9      	b.n	800241a <_svfiprintf_r+0x4a>
 80024a6:	4a3f      	ldr	r2, [pc, #252]	; (80025a4 <_svfiprintf_r+0x1d4>)
 80024a8:	1a80      	subs	r0, r0, r2
 80024aa:	fa0b f000 	lsl.w	r0, fp, r0
 80024ae:	4318      	orrs	r0, r3
 80024b0:	9004      	str	r0, [sp, #16]
 80024b2:	463c      	mov	r4, r7
 80024b4:	e7d3      	b.n	800245e <_svfiprintf_r+0x8e>
 80024b6:	9a03      	ldr	r2, [sp, #12]
 80024b8:	1d11      	adds	r1, r2, #4
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	9103      	str	r1, [sp, #12]
 80024be:	2a00      	cmp	r2, #0
 80024c0:	db01      	blt.n	80024c6 <_svfiprintf_r+0xf6>
 80024c2:	9207      	str	r2, [sp, #28]
 80024c4:	e004      	b.n	80024d0 <_svfiprintf_r+0x100>
 80024c6:	4252      	negs	r2, r2
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	9207      	str	r2, [sp, #28]
 80024ce:	9304      	str	r3, [sp, #16]
 80024d0:	783b      	ldrb	r3, [r7, #0]
 80024d2:	2b2e      	cmp	r3, #46	; 0x2e
 80024d4:	d10e      	bne.n	80024f4 <_svfiprintf_r+0x124>
 80024d6:	787b      	ldrb	r3, [r7, #1]
 80024d8:	2b2a      	cmp	r3, #42	; 0x2a
 80024da:	f107 0101 	add.w	r1, r7, #1
 80024de:	d132      	bne.n	8002546 <_svfiprintf_r+0x176>
 80024e0:	9b03      	ldr	r3, [sp, #12]
 80024e2:	1d1a      	adds	r2, r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	9203      	str	r2, [sp, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bfb8      	it	lt
 80024ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80024f0:	3702      	adds	r7, #2
 80024f2:	9305      	str	r3, [sp, #20]
 80024f4:	4c2c      	ldr	r4, [pc, #176]	; (80025a8 <_svfiprintf_r+0x1d8>)
 80024f6:	7839      	ldrb	r1, [r7, #0]
 80024f8:	2203      	movs	r2, #3
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7fd fe88 	bl	8000210 <memchr>
 8002500:	b138      	cbz	r0, 8002512 <_svfiprintf_r+0x142>
 8002502:	2340      	movs	r3, #64	; 0x40
 8002504:	1b00      	subs	r0, r0, r4
 8002506:	fa03 f000 	lsl.w	r0, r3, r0
 800250a:	9b04      	ldr	r3, [sp, #16]
 800250c:	4303      	orrs	r3, r0
 800250e:	9304      	str	r3, [sp, #16]
 8002510:	3701      	adds	r7, #1
 8002512:	7839      	ldrb	r1, [r7, #0]
 8002514:	4825      	ldr	r0, [pc, #148]	; (80025ac <_svfiprintf_r+0x1dc>)
 8002516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800251a:	2206      	movs	r2, #6
 800251c:	1c7e      	adds	r6, r7, #1
 800251e:	f7fd fe77 	bl	8000210 <memchr>
 8002522:	2800      	cmp	r0, #0
 8002524:	d035      	beq.n	8002592 <_svfiprintf_r+0x1c2>
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <_svfiprintf_r+0x1e0>)
 8002528:	b9fb      	cbnz	r3, 800256a <_svfiprintf_r+0x19a>
 800252a:	9b03      	ldr	r3, [sp, #12]
 800252c:	3307      	adds	r3, #7
 800252e:	f023 0307 	bic.w	r3, r3, #7
 8002532:	3308      	adds	r3, #8
 8002534:	9303      	str	r3, [sp, #12]
 8002536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002538:	444b      	add	r3, r9
 800253a:	9309      	str	r3, [sp, #36]	; 0x24
 800253c:	e76c      	b.n	8002418 <_svfiprintf_r+0x48>
 800253e:	fb00 3202 	mla	r2, r0, r2, r3
 8002542:	2101      	movs	r1, #1
 8002544:	e7a3      	b.n	800248e <_svfiprintf_r+0xbe>
 8002546:	2300      	movs	r3, #0
 8002548:	9305      	str	r3, [sp, #20]
 800254a:	4618      	mov	r0, r3
 800254c:	240a      	movs	r4, #10
 800254e:	460f      	mov	r7, r1
 8002550:	3101      	adds	r1, #1
 8002552:	783a      	ldrb	r2, [r7, #0]
 8002554:	3a30      	subs	r2, #48	; 0x30
 8002556:	2a09      	cmp	r2, #9
 8002558:	d903      	bls.n	8002562 <_svfiprintf_r+0x192>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0ca      	beq.n	80024f4 <_svfiprintf_r+0x124>
 800255e:	9005      	str	r0, [sp, #20]
 8002560:	e7c8      	b.n	80024f4 <_svfiprintf_r+0x124>
 8002562:	fb04 2000 	mla	r0, r4, r0, r2
 8002566:	2301      	movs	r3, #1
 8002568:	e7f1      	b.n	800254e <_svfiprintf_r+0x17e>
 800256a:	ab03      	add	r3, sp, #12
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	462a      	mov	r2, r5
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <_svfiprintf_r+0x1e4>)
 8002572:	a904      	add	r1, sp, #16
 8002574:	4640      	mov	r0, r8
 8002576:	f3af 8000 	nop.w
 800257a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800257e:	4681      	mov	r9, r0
 8002580:	d1d9      	bne.n	8002536 <_svfiprintf_r+0x166>
 8002582:	89ab      	ldrh	r3, [r5, #12]
 8002584:	065b      	lsls	r3, r3, #25
 8002586:	f53f af38 	bmi.w	80023fa <_svfiprintf_r+0x2a>
 800258a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800258c:	b01d      	add	sp, #116	; 0x74
 800258e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002592:	ab03      	add	r3, sp, #12
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	462a      	mov	r2, r5
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <_svfiprintf_r+0x1e4>)
 800259a:	a904      	add	r1, sp, #16
 800259c:	4640      	mov	r0, r8
 800259e:	f000 f881 	bl	80026a4 <_printf_i>
 80025a2:	e7ea      	b.n	800257a <_svfiprintf_r+0x1aa>
 80025a4:	08002b54 	.word	0x08002b54
 80025a8:	08002b5a 	.word	0x08002b5a
 80025ac:	08002b5e 	.word	0x08002b5e
 80025b0:	00000000 	.word	0x00000000
 80025b4:	08002319 	.word	0x08002319

080025b8 <_printf_common>:
 80025b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025bc:	4691      	mov	r9, r2
 80025be:	461f      	mov	r7, r3
 80025c0:	688a      	ldr	r2, [r1, #8]
 80025c2:	690b      	ldr	r3, [r1, #16]
 80025c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025c8:	4293      	cmp	r3, r2
 80025ca:	bfb8      	it	lt
 80025cc:	4613      	movlt	r3, r2
 80025ce:	f8c9 3000 	str.w	r3, [r9]
 80025d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025d6:	4606      	mov	r6, r0
 80025d8:	460c      	mov	r4, r1
 80025da:	b112      	cbz	r2, 80025e2 <_printf_common+0x2a>
 80025dc:	3301      	adds	r3, #1
 80025de:	f8c9 3000 	str.w	r3, [r9]
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	0699      	lsls	r1, r3, #26
 80025e6:	bf42      	ittt	mi
 80025e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80025ec:	3302      	addmi	r3, #2
 80025ee:	f8c9 3000 	strmi.w	r3, [r9]
 80025f2:	6825      	ldr	r5, [r4, #0]
 80025f4:	f015 0506 	ands.w	r5, r5, #6
 80025f8:	d107      	bne.n	800260a <_printf_common+0x52>
 80025fa:	f104 0a19 	add.w	sl, r4, #25
 80025fe:	68e3      	ldr	r3, [r4, #12]
 8002600:	f8d9 2000 	ldr.w	r2, [r9]
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	429d      	cmp	r5, r3
 8002608:	db29      	blt.n	800265e <_printf_common+0xa6>
 800260a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800260e:	6822      	ldr	r2, [r4, #0]
 8002610:	3300      	adds	r3, #0
 8002612:	bf18      	it	ne
 8002614:	2301      	movne	r3, #1
 8002616:	0692      	lsls	r2, r2, #26
 8002618:	d42e      	bmi.n	8002678 <_printf_common+0xc0>
 800261a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800261e:	4639      	mov	r1, r7
 8002620:	4630      	mov	r0, r6
 8002622:	47c0      	blx	r8
 8002624:	3001      	adds	r0, #1
 8002626:	d021      	beq.n	800266c <_printf_common+0xb4>
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	68e5      	ldr	r5, [r4, #12]
 800262c:	f8d9 2000 	ldr.w	r2, [r9]
 8002630:	f003 0306 	and.w	r3, r3, #6
 8002634:	2b04      	cmp	r3, #4
 8002636:	bf08      	it	eq
 8002638:	1aad      	subeq	r5, r5, r2
 800263a:	68a3      	ldr	r3, [r4, #8]
 800263c:	6922      	ldr	r2, [r4, #16]
 800263e:	bf0c      	ite	eq
 8002640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002644:	2500      	movne	r5, #0
 8002646:	4293      	cmp	r3, r2
 8002648:	bfc4      	itt	gt
 800264a:	1a9b      	subgt	r3, r3, r2
 800264c:	18ed      	addgt	r5, r5, r3
 800264e:	f04f 0900 	mov.w	r9, #0
 8002652:	341a      	adds	r4, #26
 8002654:	454d      	cmp	r5, r9
 8002656:	d11b      	bne.n	8002690 <_printf_common+0xd8>
 8002658:	2000      	movs	r0, #0
 800265a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800265e:	2301      	movs	r3, #1
 8002660:	4652      	mov	r2, sl
 8002662:	4639      	mov	r1, r7
 8002664:	4630      	mov	r0, r6
 8002666:	47c0      	blx	r8
 8002668:	3001      	adds	r0, #1
 800266a:	d103      	bne.n	8002674 <_printf_common+0xbc>
 800266c:	f04f 30ff 	mov.w	r0, #4294967295
 8002670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002674:	3501      	adds	r5, #1
 8002676:	e7c2      	b.n	80025fe <_printf_common+0x46>
 8002678:	18e1      	adds	r1, r4, r3
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	2030      	movs	r0, #48	; 0x30
 800267e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002682:	4422      	add	r2, r4
 8002684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800268c:	3302      	adds	r3, #2
 800268e:	e7c4      	b.n	800261a <_printf_common+0x62>
 8002690:	2301      	movs	r3, #1
 8002692:	4622      	mov	r2, r4
 8002694:	4639      	mov	r1, r7
 8002696:	4630      	mov	r0, r6
 8002698:	47c0      	blx	r8
 800269a:	3001      	adds	r0, #1
 800269c:	d0e6      	beq.n	800266c <_printf_common+0xb4>
 800269e:	f109 0901 	add.w	r9, r9, #1
 80026a2:	e7d7      	b.n	8002654 <_printf_common+0x9c>

080026a4 <_printf_i>:
 80026a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026a8:	4617      	mov	r7, r2
 80026aa:	7e0a      	ldrb	r2, [r1, #24]
 80026ac:	b085      	sub	sp, #20
 80026ae:	2a6e      	cmp	r2, #110	; 0x6e
 80026b0:	4698      	mov	r8, r3
 80026b2:	4606      	mov	r6, r0
 80026b4:	460c      	mov	r4, r1
 80026b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80026b8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80026bc:	f000 80bc 	beq.w	8002838 <_printf_i+0x194>
 80026c0:	d81a      	bhi.n	80026f8 <_printf_i+0x54>
 80026c2:	2a63      	cmp	r2, #99	; 0x63
 80026c4:	d02e      	beq.n	8002724 <_printf_i+0x80>
 80026c6:	d80a      	bhi.n	80026de <_printf_i+0x3a>
 80026c8:	2a00      	cmp	r2, #0
 80026ca:	f000 80c8 	beq.w	800285e <_printf_i+0x1ba>
 80026ce:	2a58      	cmp	r2, #88	; 0x58
 80026d0:	f000 808a 	beq.w	80027e8 <_printf_i+0x144>
 80026d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80026dc:	e02a      	b.n	8002734 <_printf_i+0x90>
 80026de:	2a64      	cmp	r2, #100	; 0x64
 80026e0:	d001      	beq.n	80026e6 <_printf_i+0x42>
 80026e2:	2a69      	cmp	r2, #105	; 0x69
 80026e4:	d1f6      	bne.n	80026d4 <_printf_i+0x30>
 80026e6:	6821      	ldr	r1, [r4, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80026ee:	d023      	beq.n	8002738 <_printf_i+0x94>
 80026f0:	1d11      	adds	r1, r2, #4
 80026f2:	6019      	str	r1, [r3, #0]
 80026f4:	6813      	ldr	r3, [r2, #0]
 80026f6:	e027      	b.n	8002748 <_printf_i+0xa4>
 80026f8:	2a73      	cmp	r2, #115	; 0x73
 80026fa:	f000 80b4 	beq.w	8002866 <_printf_i+0x1c2>
 80026fe:	d808      	bhi.n	8002712 <_printf_i+0x6e>
 8002700:	2a6f      	cmp	r2, #111	; 0x6f
 8002702:	d02a      	beq.n	800275a <_printf_i+0xb6>
 8002704:	2a70      	cmp	r2, #112	; 0x70
 8002706:	d1e5      	bne.n	80026d4 <_printf_i+0x30>
 8002708:	680a      	ldr	r2, [r1, #0]
 800270a:	f042 0220 	orr.w	r2, r2, #32
 800270e:	600a      	str	r2, [r1, #0]
 8002710:	e003      	b.n	800271a <_printf_i+0x76>
 8002712:	2a75      	cmp	r2, #117	; 0x75
 8002714:	d021      	beq.n	800275a <_printf_i+0xb6>
 8002716:	2a78      	cmp	r2, #120	; 0x78
 8002718:	d1dc      	bne.n	80026d4 <_printf_i+0x30>
 800271a:	2278      	movs	r2, #120	; 0x78
 800271c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002720:	496e      	ldr	r1, [pc, #440]	; (80028dc <_printf_i+0x238>)
 8002722:	e064      	b.n	80027ee <_printf_i+0x14a>
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800272a:	1d11      	adds	r1, r2, #4
 800272c:	6019      	str	r1, [r3, #0]
 800272e:	6813      	ldr	r3, [r2, #0]
 8002730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002734:	2301      	movs	r3, #1
 8002736:	e0a3      	b.n	8002880 <_printf_i+0x1dc>
 8002738:	f011 0f40 	tst.w	r1, #64	; 0x40
 800273c:	f102 0104 	add.w	r1, r2, #4
 8002740:	6019      	str	r1, [r3, #0]
 8002742:	d0d7      	beq.n	80026f4 <_printf_i+0x50>
 8002744:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002748:	2b00      	cmp	r3, #0
 800274a:	da03      	bge.n	8002754 <_printf_i+0xb0>
 800274c:	222d      	movs	r2, #45	; 0x2d
 800274e:	425b      	negs	r3, r3
 8002750:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002754:	4962      	ldr	r1, [pc, #392]	; (80028e0 <_printf_i+0x23c>)
 8002756:	220a      	movs	r2, #10
 8002758:	e017      	b.n	800278a <_printf_i+0xe6>
 800275a:	6820      	ldr	r0, [r4, #0]
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002762:	d003      	beq.n	800276c <_printf_i+0xc8>
 8002764:	1d08      	adds	r0, r1, #4
 8002766:	6018      	str	r0, [r3, #0]
 8002768:	680b      	ldr	r3, [r1, #0]
 800276a:	e006      	b.n	800277a <_printf_i+0xd6>
 800276c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002770:	f101 0004 	add.w	r0, r1, #4
 8002774:	6018      	str	r0, [r3, #0]
 8002776:	d0f7      	beq.n	8002768 <_printf_i+0xc4>
 8002778:	880b      	ldrh	r3, [r1, #0]
 800277a:	4959      	ldr	r1, [pc, #356]	; (80028e0 <_printf_i+0x23c>)
 800277c:	2a6f      	cmp	r2, #111	; 0x6f
 800277e:	bf14      	ite	ne
 8002780:	220a      	movne	r2, #10
 8002782:	2208      	moveq	r2, #8
 8002784:	2000      	movs	r0, #0
 8002786:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800278a:	6865      	ldr	r5, [r4, #4]
 800278c:	60a5      	str	r5, [r4, #8]
 800278e:	2d00      	cmp	r5, #0
 8002790:	f2c0 809c 	blt.w	80028cc <_printf_i+0x228>
 8002794:	6820      	ldr	r0, [r4, #0]
 8002796:	f020 0004 	bic.w	r0, r0, #4
 800279a:	6020      	str	r0, [r4, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d13f      	bne.n	8002820 <_printf_i+0x17c>
 80027a0:	2d00      	cmp	r5, #0
 80027a2:	f040 8095 	bne.w	80028d0 <_printf_i+0x22c>
 80027a6:	4675      	mov	r5, lr
 80027a8:	2a08      	cmp	r2, #8
 80027aa:	d10b      	bne.n	80027c4 <_printf_i+0x120>
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	07da      	lsls	r2, r3, #31
 80027b0:	d508      	bpl.n	80027c4 <_printf_i+0x120>
 80027b2:	6923      	ldr	r3, [r4, #16]
 80027b4:	6862      	ldr	r2, [r4, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	bfde      	ittt	le
 80027ba:	2330      	movle	r3, #48	; 0x30
 80027bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027c4:	ebae 0305 	sub.w	r3, lr, r5
 80027c8:	6123      	str	r3, [r4, #16]
 80027ca:	f8cd 8000 	str.w	r8, [sp]
 80027ce:	463b      	mov	r3, r7
 80027d0:	aa03      	add	r2, sp, #12
 80027d2:	4621      	mov	r1, r4
 80027d4:	4630      	mov	r0, r6
 80027d6:	f7ff feef 	bl	80025b8 <_printf_common>
 80027da:	3001      	adds	r0, #1
 80027dc:	d155      	bne.n	800288a <_printf_i+0x1e6>
 80027de:	f04f 30ff 	mov.w	r0, #4294967295
 80027e2:	b005      	add	sp, #20
 80027e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027e8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80027ec:	493c      	ldr	r1, [pc, #240]	; (80028e0 <_printf_i+0x23c>)
 80027ee:	6822      	ldr	r2, [r4, #0]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027f6:	f100 0504 	add.w	r5, r0, #4
 80027fa:	601d      	str	r5, [r3, #0]
 80027fc:	d001      	beq.n	8002802 <_printf_i+0x15e>
 80027fe:	6803      	ldr	r3, [r0, #0]
 8002800:	e002      	b.n	8002808 <_printf_i+0x164>
 8002802:	0655      	lsls	r5, r2, #25
 8002804:	d5fb      	bpl.n	80027fe <_printf_i+0x15a>
 8002806:	8803      	ldrh	r3, [r0, #0]
 8002808:	07d0      	lsls	r0, r2, #31
 800280a:	bf44      	itt	mi
 800280c:	f042 0220 	orrmi.w	r2, r2, #32
 8002810:	6022      	strmi	r2, [r4, #0]
 8002812:	b91b      	cbnz	r3, 800281c <_printf_i+0x178>
 8002814:	6822      	ldr	r2, [r4, #0]
 8002816:	f022 0220 	bic.w	r2, r2, #32
 800281a:	6022      	str	r2, [r4, #0]
 800281c:	2210      	movs	r2, #16
 800281e:	e7b1      	b.n	8002784 <_printf_i+0xe0>
 8002820:	4675      	mov	r5, lr
 8002822:	fbb3 f0f2 	udiv	r0, r3, r2
 8002826:	fb02 3310 	mls	r3, r2, r0, r3
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002830:	4603      	mov	r3, r0
 8002832:	2800      	cmp	r0, #0
 8002834:	d1f5      	bne.n	8002822 <_printf_i+0x17e>
 8002836:	e7b7      	b.n	80027a8 <_printf_i+0x104>
 8002838:	6808      	ldr	r0, [r1, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	6949      	ldr	r1, [r1, #20]
 800283e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002842:	d004      	beq.n	800284e <_printf_i+0x1aa>
 8002844:	1d10      	adds	r0, r2, #4
 8002846:	6018      	str	r0, [r3, #0]
 8002848:	6813      	ldr	r3, [r2, #0]
 800284a:	6019      	str	r1, [r3, #0]
 800284c:	e007      	b.n	800285e <_printf_i+0x1ba>
 800284e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002852:	f102 0004 	add.w	r0, r2, #4
 8002856:	6018      	str	r0, [r3, #0]
 8002858:	6813      	ldr	r3, [r2, #0]
 800285a:	d0f6      	beq.n	800284a <_printf_i+0x1a6>
 800285c:	8019      	strh	r1, [r3, #0]
 800285e:	2300      	movs	r3, #0
 8002860:	6123      	str	r3, [r4, #16]
 8002862:	4675      	mov	r5, lr
 8002864:	e7b1      	b.n	80027ca <_printf_i+0x126>
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	1d11      	adds	r1, r2, #4
 800286a:	6019      	str	r1, [r3, #0]
 800286c:	6815      	ldr	r5, [r2, #0]
 800286e:	6862      	ldr	r2, [r4, #4]
 8002870:	2100      	movs	r1, #0
 8002872:	4628      	mov	r0, r5
 8002874:	f7fd fccc 	bl	8000210 <memchr>
 8002878:	b108      	cbz	r0, 800287e <_printf_i+0x1da>
 800287a:	1b40      	subs	r0, r0, r5
 800287c:	6060      	str	r0, [r4, #4]
 800287e:	6863      	ldr	r3, [r4, #4]
 8002880:	6123      	str	r3, [r4, #16]
 8002882:	2300      	movs	r3, #0
 8002884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002888:	e79f      	b.n	80027ca <_printf_i+0x126>
 800288a:	6923      	ldr	r3, [r4, #16]
 800288c:	462a      	mov	r2, r5
 800288e:	4639      	mov	r1, r7
 8002890:	4630      	mov	r0, r6
 8002892:	47c0      	blx	r8
 8002894:	3001      	adds	r0, #1
 8002896:	d0a2      	beq.n	80027de <_printf_i+0x13a>
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	079b      	lsls	r3, r3, #30
 800289c:	d507      	bpl.n	80028ae <_printf_i+0x20a>
 800289e:	2500      	movs	r5, #0
 80028a0:	f104 0919 	add.w	r9, r4, #25
 80028a4:	68e3      	ldr	r3, [r4, #12]
 80028a6:	9a03      	ldr	r2, [sp, #12]
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	429d      	cmp	r5, r3
 80028ac:	db05      	blt.n	80028ba <_printf_i+0x216>
 80028ae:	68e0      	ldr	r0, [r4, #12]
 80028b0:	9b03      	ldr	r3, [sp, #12]
 80028b2:	4298      	cmp	r0, r3
 80028b4:	bfb8      	it	lt
 80028b6:	4618      	movlt	r0, r3
 80028b8:	e793      	b.n	80027e2 <_printf_i+0x13e>
 80028ba:	2301      	movs	r3, #1
 80028bc:	464a      	mov	r2, r9
 80028be:	4639      	mov	r1, r7
 80028c0:	4630      	mov	r0, r6
 80028c2:	47c0      	blx	r8
 80028c4:	3001      	adds	r0, #1
 80028c6:	d08a      	beq.n	80027de <_printf_i+0x13a>
 80028c8:	3501      	adds	r5, #1
 80028ca:	e7eb      	b.n	80028a4 <_printf_i+0x200>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1a7      	bne.n	8002820 <_printf_i+0x17c>
 80028d0:	780b      	ldrb	r3, [r1, #0]
 80028d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028da:	e765      	b.n	80027a8 <_printf_i+0x104>
 80028dc:	08002b76 	.word	0x08002b76
 80028e0:	08002b65 	.word	0x08002b65

080028e4 <memcpy>:
 80028e4:	b510      	push	{r4, lr}
 80028e6:	1e43      	subs	r3, r0, #1
 80028e8:	440a      	add	r2, r1
 80028ea:	4291      	cmp	r1, r2
 80028ec:	d100      	bne.n	80028f0 <memcpy+0xc>
 80028ee:	bd10      	pop	{r4, pc}
 80028f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028f8:	e7f7      	b.n	80028ea <memcpy+0x6>

080028fa <memmove>:
 80028fa:	4288      	cmp	r0, r1
 80028fc:	b510      	push	{r4, lr}
 80028fe:	eb01 0302 	add.w	r3, r1, r2
 8002902:	d803      	bhi.n	800290c <memmove+0x12>
 8002904:	1e42      	subs	r2, r0, #1
 8002906:	4299      	cmp	r1, r3
 8002908:	d10c      	bne.n	8002924 <memmove+0x2a>
 800290a:	bd10      	pop	{r4, pc}
 800290c:	4298      	cmp	r0, r3
 800290e:	d2f9      	bcs.n	8002904 <memmove+0xa>
 8002910:	1881      	adds	r1, r0, r2
 8002912:	1ad2      	subs	r2, r2, r3
 8002914:	42d3      	cmn	r3, r2
 8002916:	d100      	bne.n	800291a <memmove+0x20>
 8002918:	bd10      	pop	{r4, pc}
 800291a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800291e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002922:	e7f7      	b.n	8002914 <memmove+0x1a>
 8002924:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002928:	f802 4f01 	strb.w	r4, [r2, #1]!
 800292c:	e7eb      	b.n	8002906 <memmove+0xc>
	...

08002930 <_free_r>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	4605      	mov	r5, r0
 8002934:	2900      	cmp	r1, #0
 8002936:	d045      	beq.n	80029c4 <_free_r+0x94>
 8002938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800293c:	1f0c      	subs	r4, r1, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	bfb8      	it	lt
 8002942:	18e4      	addlt	r4, r4, r3
 8002944:	f000 f8d6 	bl	8002af4 <__malloc_lock>
 8002948:	4a1f      	ldr	r2, [pc, #124]	; (80029c8 <_free_r+0x98>)
 800294a:	6813      	ldr	r3, [r2, #0]
 800294c:	4610      	mov	r0, r2
 800294e:	b933      	cbnz	r3, 800295e <_free_r+0x2e>
 8002950:	6063      	str	r3, [r4, #4]
 8002952:	6014      	str	r4, [r2, #0]
 8002954:	4628      	mov	r0, r5
 8002956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800295a:	f000 b8cc 	b.w	8002af6 <__malloc_unlock>
 800295e:	42a3      	cmp	r3, r4
 8002960:	d90c      	bls.n	800297c <_free_r+0x4c>
 8002962:	6821      	ldr	r1, [r4, #0]
 8002964:	1862      	adds	r2, r4, r1
 8002966:	4293      	cmp	r3, r2
 8002968:	bf04      	itt	eq
 800296a:	681a      	ldreq	r2, [r3, #0]
 800296c:	685b      	ldreq	r3, [r3, #4]
 800296e:	6063      	str	r3, [r4, #4]
 8002970:	bf04      	itt	eq
 8002972:	1852      	addeq	r2, r2, r1
 8002974:	6022      	streq	r2, [r4, #0]
 8002976:	6004      	str	r4, [r0, #0]
 8002978:	e7ec      	b.n	8002954 <_free_r+0x24>
 800297a:	4613      	mov	r3, r2
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	b10a      	cbz	r2, 8002984 <_free_r+0x54>
 8002980:	42a2      	cmp	r2, r4
 8002982:	d9fa      	bls.n	800297a <_free_r+0x4a>
 8002984:	6819      	ldr	r1, [r3, #0]
 8002986:	1858      	adds	r0, r3, r1
 8002988:	42a0      	cmp	r0, r4
 800298a:	d10b      	bne.n	80029a4 <_free_r+0x74>
 800298c:	6820      	ldr	r0, [r4, #0]
 800298e:	4401      	add	r1, r0
 8002990:	1858      	adds	r0, r3, r1
 8002992:	4282      	cmp	r2, r0
 8002994:	6019      	str	r1, [r3, #0]
 8002996:	d1dd      	bne.n	8002954 <_free_r+0x24>
 8002998:	6810      	ldr	r0, [r2, #0]
 800299a:	6852      	ldr	r2, [r2, #4]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	4401      	add	r1, r0
 80029a0:	6019      	str	r1, [r3, #0]
 80029a2:	e7d7      	b.n	8002954 <_free_r+0x24>
 80029a4:	d902      	bls.n	80029ac <_free_r+0x7c>
 80029a6:	230c      	movs	r3, #12
 80029a8:	602b      	str	r3, [r5, #0]
 80029aa:	e7d3      	b.n	8002954 <_free_r+0x24>
 80029ac:	6820      	ldr	r0, [r4, #0]
 80029ae:	1821      	adds	r1, r4, r0
 80029b0:	428a      	cmp	r2, r1
 80029b2:	bf04      	itt	eq
 80029b4:	6811      	ldreq	r1, [r2, #0]
 80029b6:	6852      	ldreq	r2, [r2, #4]
 80029b8:	6062      	str	r2, [r4, #4]
 80029ba:	bf04      	itt	eq
 80029bc:	1809      	addeq	r1, r1, r0
 80029be:	6021      	streq	r1, [r4, #0]
 80029c0:	605c      	str	r4, [r3, #4]
 80029c2:	e7c7      	b.n	8002954 <_free_r+0x24>
 80029c4:	bd38      	pop	{r3, r4, r5, pc}
 80029c6:	bf00      	nop
 80029c8:	20000090 	.word	0x20000090

080029cc <_malloc_r>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	1ccd      	adds	r5, r1, #3
 80029d0:	f025 0503 	bic.w	r5, r5, #3
 80029d4:	3508      	adds	r5, #8
 80029d6:	2d0c      	cmp	r5, #12
 80029d8:	bf38      	it	cc
 80029da:	250c      	movcc	r5, #12
 80029dc:	2d00      	cmp	r5, #0
 80029de:	4606      	mov	r6, r0
 80029e0:	db01      	blt.n	80029e6 <_malloc_r+0x1a>
 80029e2:	42a9      	cmp	r1, r5
 80029e4:	d903      	bls.n	80029ee <_malloc_r+0x22>
 80029e6:	230c      	movs	r3, #12
 80029e8:	6033      	str	r3, [r6, #0]
 80029ea:	2000      	movs	r0, #0
 80029ec:	bd70      	pop	{r4, r5, r6, pc}
 80029ee:	f000 f881 	bl	8002af4 <__malloc_lock>
 80029f2:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <_malloc_r+0xb4>)
 80029f4:	6814      	ldr	r4, [r2, #0]
 80029f6:	4621      	mov	r1, r4
 80029f8:	b991      	cbnz	r1, 8002a20 <_malloc_r+0x54>
 80029fa:	4c22      	ldr	r4, [pc, #136]	; (8002a84 <_malloc_r+0xb8>)
 80029fc:	6823      	ldr	r3, [r4, #0]
 80029fe:	b91b      	cbnz	r3, 8002a08 <_malloc_r+0x3c>
 8002a00:	4630      	mov	r0, r6
 8002a02:	f000 f867 	bl	8002ad4 <_sbrk_r>
 8002a06:	6020      	str	r0, [r4, #0]
 8002a08:	4629      	mov	r1, r5
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	f000 f862 	bl	8002ad4 <_sbrk_r>
 8002a10:	1c43      	adds	r3, r0, #1
 8002a12:	d126      	bne.n	8002a62 <_malloc_r+0x96>
 8002a14:	230c      	movs	r3, #12
 8002a16:	6033      	str	r3, [r6, #0]
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f000 f86c 	bl	8002af6 <__malloc_unlock>
 8002a1e:	e7e4      	b.n	80029ea <_malloc_r+0x1e>
 8002a20:	680b      	ldr	r3, [r1, #0]
 8002a22:	1b5b      	subs	r3, r3, r5
 8002a24:	d41a      	bmi.n	8002a5c <_malloc_r+0x90>
 8002a26:	2b0b      	cmp	r3, #11
 8002a28:	d90f      	bls.n	8002a4a <_malloc_r+0x7e>
 8002a2a:	600b      	str	r3, [r1, #0]
 8002a2c:	50cd      	str	r5, [r1, r3]
 8002a2e:	18cc      	adds	r4, r1, r3
 8002a30:	4630      	mov	r0, r6
 8002a32:	f000 f860 	bl	8002af6 <__malloc_unlock>
 8002a36:	f104 000b 	add.w	r0, r4, #11
 8002a3a:	1d23      	adds	r3, r4, #4
 8002a3c:	f020 0007 	bic.w	r0, r0, #7
 8002a40:	1ac3      	subs	r3, r0, r3
 8002a42:	d01b      	beq.n	8002a7c <_malloc_r+0xb0>
 8002a44:	425a      	negs	r2, r3
 8002a46:	50e2      	str	r2, [r4, r3]
 8002a48:	bd70      	pop	{r4, r5, r6, pc}
 8002a4a:	428c      	cmp	r4, r1
 8002a4c:	bf0d      	iteet	eq
 8002a4e:	6863      	ldreq	r3, [r4, #4]
 8002a50:	684b      	ldrne	r3, [r1, #4]
 8002a52:	6063      	strne	r3, [r4, #4]
 8002a54:	6013      	streq	r3, [r2, #0]
 8002a56:	bf18      	it	ne
 8002a58:	460c      	movne	r4, r1
 8002a5a:	e7e9      	b.n	8002a30 <_malloc_r+0x64>
 8002a5c:	460c      	mov	r4, r1
 8002a5e:	6849      	ldr	r1, [r1, #4]
 8002a60:	e7ca      	b.n	80029f8 <_malloc_r+0x2c>
 8002a62:	1cc4      	adds	r4, r0, #3
 8002a64:	f024 0403 	bic.w	r4, r4, #3
 8002a68:	42a0      	cmp	r0, r4
 8002a6a:	d005      	beq.n	8002a78 <_malloc_r+0xac>
 8002a6c:	1a21      	subs	r1, r4, r0
 8002a6e:	4630      	mov	r0, r6
 8002a70:	f000 f830 	bl	8002ad4 <_sbrk_r>
 8002a74:	3001      	adds	r0, #1
 8002a76:	d0cd      	beq.n	8002a14 <_malloc_r+0x48>
 8002a78:	6025      	str	r5, [r4, #0]
 8002a7a:	e7d9      	b.n	8002a30 <_malloc_r+0x64>
 8002a7c:	bd70      	pop	{r4, r5, r6, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000090 	.word	0x20000090
 8002a84:	20000094 	.word	0x20000094

08002a88 <_realloc_r>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	4607      	mov	r7, r0
 8002a8c:	4614      	mov	r4, r2
 8002a8e:	460e      	mov	r6, r1
 8002a90:	b921      	cbnz	r1, 8002a9c <_realloc_r+0x14>
 8002a92:	4611      	mov	r1, r2
 8002a94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a98:	f7ff bf98 	b.w	80029cc <_malloc_r>
 8002a9c:	b922      	cbnz	r2, 8002aa8 <_realloc_r+0x20>
 8002a9e:	f7ff ff47 	bl	8002930 <_free_r>
 8002aa2:	4625      	mov	r5, r4
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aa8:	f000 f826 	bl	8002af8 <_malloc_usable_size_r>
 8002aac:	4284      	cmp	r4, r0
 8002aae:	d90f      	bls.n	8002ad0 <_realloc_r+0x48>
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	f7ff ff8a 	bl	80029cc <_malloc_r>
 8002ab8:	4605      	mov	r5, r0
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d0f2      	beq.n	8002aa4 <_realloc_r+0x1c>
 8002abe:	4631      	mov	r1, r6
 8002ac0:	4622      	mov	r2, r4
 8002ac2:	f7ff ff0f 	bl	80028e4 <memcpy>
 8002ac6:	4631      	mov	r1, r6
 8002ac8:	4638      	mov	r0, r7
 8002aca:	f7ff ff31 	bl	8002930 <_free_r>
 8002ace:	e7e9      	b.n	8002aa4 <_realloc_r+0x1c>
 8002ad0:	4635      	mov	r5, r6
 8002ad2:	e7e7      	b.n	8002aa4 <_realloc_r+0x1c>

08002ad4 <_sbrk_r>:
 8002ad4:	b538      	push	{r3, r4, r5, lr}
 8002ad6:	4c06      	ldr	r4, [pc, #24]	; (8002af0 <_sbrk_r+0x1c>)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	4605      	mov	r5, r0
 8002adc:	4608      	mov	r0, r1
 8002ade:	6023      	str	r3, [r4, #0]
 8002ae0:	f7fd ff66 	bl	80009b0 <_sbrk>
 8002ae4:	1c43      	adds	r3, r0, #1
 8002ae6:	d102      	bne.n	8002aee <_sbrk_r+0x1a>
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	b103      	cbz	r3, 8002aee <_sbrk_r+0x1a>
 8002aec:	602b      	str	r3, [r5, #0]
 8002aee:	bd38      	pop	{r3, r4, r5, pc}
 8002af0:	20000128 	.word	0x20000128

08002af4 <__malloc_lock>:
 8002af4:	4770      	bx	lr

08002af6 <__malloc_unlock>:
 8002af6:	4770      	bx	lr

08002af8 <_malloc_usable_size_r>:
 8002af8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002afc:	2800      	cmp	r0, #0
 8002afe:	f1a0 0004 	sub.w	r0, r0, #4
 8002b02:	bfbc      	itt	lt
 8002b04:	580b      	ldrlt	r3, [r1, r0]
 8002b06:	18c0      	addlt	r0, r0, r3
 8002b08:	4770      	bx	lr
	...

08002b0c <_init>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr

08002b18 <_fini>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	bf00      	nop
 8002b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1e:	bc08      	pop	{r3}
 8002b20:	469e      	mov	lr, r3
 8002b22:	4770      	bx	lr
